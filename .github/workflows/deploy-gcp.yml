name: Deploy to Google Cloud Platform

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: tenders-backend
  REGION: us-central1

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
                     -t gcr.io/$PROJECT_ID/$SERVICE_NAME:latest .

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:latest

    - name: Create secrets if they don't exist
      run: |
        # Create MongoDB URI secret
        if ! gcloud secrets describe mongodb-uri >/dev/null 2>&1; then
          echo -n "${{ secrets.MONGODB_URI }}" | gcloud secrets create mongodb-uri --data-file=-
        else
          echo -n "${{ secrets.MONGODB_URI }}" | gcloud secrets versions add mongodb-uri --data-file=-
        fi
        
        # Create JWT Secret
        if ! gcloud secrets describe jwt-secret >/dev/null 2>&1; then
          echo -n "${{ secrets.JWT_SECRET }}" | gcloud secrets create jwt-secret --data-file=-
        else
          echo -n "${{ secrets.JWT_SECRET }}" | gcloud secrets versions add jwt-secret --data-file=-
        fi
        
        # Create System User Password
        if ! gcloud secrets describe system-user-password >/dev/null 2>&1; then
          echo -n "${{ secrets.SYSTEM_USER_PASSWORD }}" | gcloud secrets create system-user-password --data-file=-
        else
          echo -n "${{ secrets.SYSTEM_USER_PASSWORD }}" | gcloud secrets versions add system-user-password --data-file=-
        fi

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 1Gi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --timeout 300 \
          --concurrency 80 \
          --set-env-vars NODE_ENV=production,PORT=3000,JWT_EXPIRES_IN=7d,SYSTEM_USER_EMAIL=system@tenders.lk \
          --set-secrets MONGODB_URI=mongodb-uri:latest,JWT_SECRET=jwt-secret:latest,SYSTEM_USER_PASSWORD=system-user-password:latest

    - name: Get service URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format 'value(status.url)')
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service URL: $SERVICE_URL"

    - name: Test deployment
      run: |
        sleep 30  # Wait for service to be ready
        curl -f "${{ steps.service-url.outputs.url }}/api/health" || exit 1
        echo "‚úÖ Deployment successful! Service is healthy"

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully!"
          echo "üîó Service URL: ${{ steps.service-url.outputs.url }}"
        else
          echo "‚ùå Deployment failed"
          echo "üìã Check logs: gcloud run logs read --service=$SERVICE_NAME --region=$REGION"
        fi

  notify:
    name: Notify deployment status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment notification: SUCCESS"
        else
          echo "‚ùå Deployment notification: FAILED"
        fi